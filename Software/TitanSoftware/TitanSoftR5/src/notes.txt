// Quaternion Stuff
float q_body_mag = 0;
float q_gyro[4] = {0, 0, 0, 0};
float q[4] = {1, 0, 0, 0};
float q_body[4] = {1, 0, 0, 0};
float q_grad[4] = {0, 0, 0, 0};
float omega[3] = {0, 0, 0};
float theta;

void getGyroBiases()
{
    int count = 0;
    const int averageAmount = 500;
    while (count < averageAmount)
    {
        gyro.readSensor();
        g_bias[0] += gyro.getGyroX_rads();
        g_bias[1] += gyro.getGyroY_rads();
        g_bias[2] += gyro.getGyroZ_rads();
        count += 1;
        Serial.print(".");
        delay(10);
    }
    Serial.println();
    g_bias[0] /= (float)averageAmount;
    g_bias[1] /= (float)averageAmount;
    g_bias[2] /= (float)averageAmount;

    Serial.print(g_bias[0],8);
    Serial.print(" ");
    Serial.print(g_bias[1],8);
    Serial.print(" ");
    Serial.print(g_bias[2],8);
    Serial.println(" ");
}

void getYPR()
{
    gyro_current_time = micros();
    gyro.readSensor();

    if (!first_gyro_reading)
    {

        omega[0] = gyro.getGyroX_rads() - g_bias[0];
        omega[1] = gyro.getGyroY_rads() - g_bias[1];
        omega[2] = gyro.getGyroZ_rads() - g_bias[2];

        data.gx = omega[0];
        data.gy = omega[1];
        data.gz = omega[2];

        q_body_mag = sqrt(sq(omega[0]) + sq(omega[1]) + sq(omega[2]));
        gyro_dt = ((gyro_current_time - gyro_past_time) / 1000000.0);

        theta = q_body_mag * gyro_dt;
        q_gyro[0] = cos(theta / 2);
        q_gyro[1] = -(omega[0] / q_body_mag * sin(theta / 2));
        q_gyro[2] = -(omega[1] / q_body_mag * sin(theta / 2));
        q_gyro[3] = -(omega[2] / q_body_mag * sin(theta / 2));

        q[0] = q_body[0];
        q[1] = q_body[1];
        q[2] = q_body[2];
        q[3] = q_body[3];

        q_body[0] = q_gyro[0] * q[0] - q_gyro[1] * q[1] - q_gyro[2] * q[2] - q_gyro[3] * q[3];
        q_body[1] = q_gyro[0] * q[1] + q_gyro[1] * q[0] + q_gyro[2] * q[3] - q_gyro[3] * q[2];
        q_body[2] = q_gyro[0] * q[2] - q_gyro[1] * q[3] + q_gyro[2] * q[0] + q_gyro[3] * q[1];
        q_body[3] = q_gyro[0] * q[3] + q_gyro[1] * q[2] - q_gyro[2] * q[1] + q_gyro[3] * q[0];

        
        // For getting world frame acceleration
        float norm = sqrtf(powf(omega[2], 2) + powf(omega[1], 2) + powf(omega[0], 2));
        norm = copysignf(max(abs(norm), 1e-9), norm); // NO DIVIDE BY 0
        orientation *= from_axis_angle(gyro_dt * norm, omega[0] / norm, omega[1] / norm, omega[2] / norm);
        localAccelQuat = Quaternion(0, data.ax, data.ay, data.az);
        worldAccelQuat = orientation.rotate(localAccelQuat);
        data.worldAx = worldAccelQuat.b;
        data.worldAy = worldAccelQuat.c;
        data.worldAz = worldAccelQuat.d;

       

        quatToEuler(q_body, ypr);
        data.yaw = ypr[0];
        data.pitch = ypr[1];
        data.roll = ypr[2];
    }
    first_gyro_reading = false;
    gyro_past_time = gyro_current_time;
}